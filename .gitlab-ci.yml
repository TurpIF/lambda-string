stages:
  - build
  - test
  - package
  - deploy

variables:
  # Activate remote debug server during integration test on specified port
  # DEBUG: <port>

  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"

  MAVEN_DYN_CLI_OPTS: '--batch-mode --errors --fail-at-end --show-version $([ -n "$DEBUG" ] && echo "-Dit.debug.remote=$DEBUG")'
  MAVEN_CLI_OPTS: 'echo "$MAVEN_DYN_CLI_OPTS"'

  JDK_AGENT_VERSION: "maven:3.5-jdk-8"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_REF_NAME"'
cache:
  paths:
    - .m2/repository

.build: &build
  image: $JDK_AGENT_VERSION
  stage: build
  artifacts:
    paths:
      - target/*.jar
    expire_in: 20 minutes

build:jdk8:
  <<: *build
  script: "mvn package `eval $MAVEN_CLI_OPTS`"

build-benchmark:
  <<: *build
  script: "mvn package `eval $MAVEN_CLI_OPTS` -DfinalName=build"
  only:
    - master
    - tags

package:jdk8:
  image: $JDK_AGENT_VERSION
  stage: package
  script: "mvn verify `eval $MAVEN_CLI_OPTS`"
  artifacts:
    paths:
      - target/*.jar
      - target/site/jacoco

.test: &test
  stage: test
  script: "mvn verify `eval $MAVEN_CLI_OPTS` \
    -P skip-jar -DskipUTs \
    -Dmaven.javadoc.skip=true \
    -Dmaven.source.skip=true \
    -Dmaven.javadoc.skip=true \
    -Dassembly.skipAssembly=true \
    -Djacoco.skip=true"
  dependencies:
    - build:jdk8

test-jre8:
  <<: *test
  image: maven:3.5-jdk-8-slim

test-jre9:
  <<: *test
  image: maven:3.5-jdk-9-slim

test-jre10:
  <<: *test
  image: maven:3.5-jdk-10-slim

test-jre8-ibm:
  <<: *test
  image: maven:3.5-ibmjava-8-alpine

.benchmark: &benchmark
  stage: package
  variables:
      JAVA_ARGS: ""
  script:
    - mkdir -p target/benchmark
    - "java ${JAVA_ARGS} \
      -jar target/build-benchmarks.jar \
      -foe true \
      -rf json -rff target/benchmark/${CI_JOB_NAME}.json \
      | tee target/benchmark/${CI_JOB_NAME}.log"
  dependencies:
    - build-benchmark
  artifacts:
    paths:
    - target/benchmark
  only:
    - master
    - tags

benchmark-jre8:
  <<: *benchmark
  image: maven:3.5-jdk-8-slim

benchmark-jre9:
  <<: *benchmark
  variables:
    JAVA_ARGS: "-Djdk.attach.allowAttachSelf=true --illegal-access=warn"
  image: maven:3.5-jdk-9-slim

benchmark-jre10:
  <<: *benchmark
  variables:
    JAVA_ARGS: "-Djdk.attach.allowAttachSelf=true --illegal-access=warn"
  image: maven:3.5-jdk-10-slim

benchmark-jre8-ibm:
  <<: *benchmark
  variables:
    JAVA_ARGS: "-Dcom.ibm.tools.attach.directory=/tmp -Djava.io.tmpdir=/tmp"
  image: maven:3.5-ibmjava-8-alpine

pages:
  image: alpine:3.7
  stage: deploy
  dependencies:
    - package:jdk8
  script:
    - mkdir -p public/coverage
    - cp -rf target/site/jacoco/* public/coverage
    - awk -F"," '
      {
        instructions += $4 + $5;
        covered += $5
      }
      END
      {
        print covered, "/", instructions, "instructions covered";
        print 100*covered/instructions, "% covered"
      }
      ' target/site/jacoco/jacoco.csv
  artifacts:
    paths:
      - public
  only:
    - master
    - tags
